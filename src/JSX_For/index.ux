<template>
  <div class="doc-page">
    <div class="page-title-wrap">
      <text class="page-title">{{componentName}}</text>
    </div>
    <div class="item-container">
      <text class="hint">与block配合使用</text>
      <list class="list" onscrollbottom="{{handleScrollBottom('listData1')}}">
        <block for="{{listData1}}">
          <slot content="{{renderListItem($item, $idx)}}"></slot>
        </block>
        <list-item type="loadMore" class="load-more">
          <progress type="circular"></progress>
          <text>加载更多</text>
        </list-item>
      </list>
    </div>
    <div class="item-container">
      <text class="hint line">在render函数中直接通过js代码实现for逻辑</text>
      <list class="list" onscrollbottom="{{handleScrollBottom('listData2')}}">
        <slot content="{{renderListItems('listData2')}}"></slot>
        <list-item type="loadMore" class="load-more">
          <progress type="circular"></progress>
          <text>加载更多</text>
        </list-item>
      </list>
    </div>
  </div>
</template>

<style>
  @import '../Common/css/common.css';

  .item-container {
    flex: 1;
    margin-bottom: 50px;
    margin-right: 60px;
    margin-left: 60px;
    flex-direction: column;
    justify-content: center;
  }
  .list {
    flex: 1;
  }
  .load-more {
    justify-content: center;
    align-items: center;
    height: 100px;
  }
  .item {
    height: 150px;
    align-items: center;
    justify-content: center;
    margin-bottom: 15px;
    background-color: #f76160;
  }
  .hint {
    padding-bottom: 20px;
    color: #aaaaaa;
  }
  .line {
    padding-top: 20px;
    border-style: solid;
    border-color: #bbbbbb;
    border-top-width: 1px;
  }
</style>

<script>
  export default {
    private: {
      componentName: 'for',
      listAdd: [
        {name: 'A'},
        {name: 'B'},
        {name: 'C'}
      ],
      listData1: [],
      listData2: []
    },
    onInit () {
      this.$page.setTitleBar({text: 'For'})
      // 初始化列表数据
      this.listData1 = [].concat(this.listAdd)
      this.listData2 = [].concat(this.listAdd)
    },
    renderListItem (item, index) {
      // 与block配合使用
      const props = {
        type: 'listItem',
        class: 'item'
      }
      const temp = item.name + '---' + index
      return (
        <list-item {...props}>
          <text>{temp}</text>
        </list-item>
      )
    },
    renderListItems (dataName) {
      const self = this
      // 在render函数中直接通过js代码实现for逻辑
      let renderArray = []
      const props = {
        type: 'listItem',
        class: 'item'
      }
      self[dataName].forEach((item, index) => {
        const temp = item.name + '---' + index
        renderArray.push(
          <list-item {...props}>
            <text>{temp}</text>
          </list-item>
        )
      })
      return renderArray
    },
    handleScrollBottom (dataName) {
      // 加载下一页
      const self = this
      const renderData = [].concat(self[dataName], self.listAdd)
      setTimeout(function () {
        self[dataName] = renderData
      }, 1000)
    }
  }
</script>
