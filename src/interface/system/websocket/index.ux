<template>
  <div class="doc-page">
    <div class="page-title-wrap">
      <text class="page-title">{{componentName}}</text>
    </div>

    <div class="item-container">
      <input type="button" class="btn" onclick="create" value="创建websocket实例" />
      <input type="text" class="input-text" onchange="handleChange" placeholder="请输入" />
      <input type="button" class="btn" onclick="send" value="发送消息" />
      <input type="button" class="btn" onclick="close" value="关闭连接" />
    </div>
  </div>
</template>

<style>
  @import '../../../common/css/common.css';

  .item-container {
    margin-top: 50px;
    margin-right: 60px;
    margin-left: 60px;
    flex-direction: column;
  }

  .input-text {
    height: 80px;
    line-height: 80px;
    padding-left: 30px;
    padding-right: 30px;
    margin-left: 30px;
    margin-right: 30px;
    margin-bottom: 50px;
    border-top-width: 1px;
    border-bottom-width: 1px;
    border-color: #999999;
    font-size: 30px;
    background-color: #ffffff;
  }
</style>

<script>
  import prompt from '@system.prompt'
  import websocketfactory from '@system.websocketfactory'

  let ws = null

  export default {
    data: {
      componentName: 'websocket',
      message: '',
    },
    onInit() {
      this.$page.setTitleBar({ text: this.componentName })
    },
    create() {
      ws = websocketfactory.create({
        url: 'wss://echo.websocket.org',
        header: {
          'content-type': 'application/json'
        },
        protocols: ['protocol']
      })

      ws.onopen = function () {
        prompt.showToast({
          message: 'connect open'
        })
      }

      ws.onmessage = function (data) {
        prompt.showToast({
          message: `message is ${data.data}`
        })
      }

      ws.onerror = function (data) {
        prompt.showToast({
          message: `onerror data.data = ${data.data}`
        })
      }

      ws.onclose = function (data) {
        prompt.showToast({
          message: `onclose data.code = ${data.code}, data.reason = ${data.reason}, data.wasClean = ${data.wasClean}`
        })
      }
    },
    handleChange(e) {
      this.message = e.value
    },
    send() {
      ws && ws.send({
        data: this.message,
        success: function () {
          prompt.showToast({
            message: 'send success'
          })
        },
        fail: function (data, code) {
          prompt.showToast({
            message: `handling fail, code = ${code}`
          })
        }
      })
    },
    close() {
      ws && ws.close({
        success: function () {
          prompt.showToast({
            message: 'close success'
          })
          ws = null
        },
        fail: function (data, code) {
          prompt.showToast({
            message: `handling fail, code = ${code}`
          })
        }
      })
    }
  }
</script>